#!/bin/sh -eu

is_null() {
    test "$1" = - -o "$1" = NULL
}

prototype() {
    echo "$1;" >&3
}

protos="`mktemp`"
ascii="`mktemp`"
modbus="`mktemp`"
exec 3>"$protos"
exec 4>"$ascii"
exec 5>"$modbus"

# File header
cat <<EOF
// Automatically generated file. Edit avr/commands.tsv instead!
#include <stdlib.h>
#include <avr/pgmspace.h>
#include "cmd.h"
#include "juksautin.h"
#include "clock.h"

EOF

# Skip header line
read foo

while read objtype address name r_read r_write datatype; do
    unset fp_read fp_write fp_printer fp_scanner
    
    if ! is_null "$r_read"; then
	fp_read="&$r_read"
	fp_printer="&cmd_print_$datatype"

	# Create prototype for print function
	prototype "cmd_print_t cmd_print_$datatype"

	# Create prototype for getter (to validate type safety on the way)
	prototype "get_${datatype}_t $r_read"
    fi

    if ! is_null "$r_write"; then
	fp_write="&$r_write"
	fp_scanner="&cmd_scan_$datatype" 
	
	# Create prototype for write function
        prototype "cmd_scan_t cmd_scan_$datatype"

	# Create prototype for setter (to validate type safety on the way)
	prototype "set_${datatype}_t $r_write"
    fi
    
    # Produce lines for both ASCII interface and Modbus
    action="{ ${fp_read-NULL}, ${fp_write-NULL} }"
    if test "$name" != -; then
	# PROGMEM strings must be outside of array initialization
	echo "static char const name_$name[] PROGMEM = \"$name\";"
	# The actual array item
	echo "	{ name_$name, $action, ${fp_printer-NULL}, ${fp_scanner-NULL} }," >&4
    fi
    if test "$objtype" != -; then
	echo "	{`printf %2d  "$objtype"`, 0x`printf %04x "$address"`, $action }," >&5
    fi
done

# Prototypes. Only once per function.
echo
sort -u $protos

# Ascii table header
cat <<EOF

cmd_ascii_t const cmd_ascii[] PROGMEM = {
EOF

# ASCII table content
sort "$ascii"

# Boilerplate between ASCII and Modbus tables
cat <<EOF
};

cmd_modbus_t const cmd_modbus[] PROGMEM = {
EOF

# Modbus table content
sort "$modbus"

# Trailing content
cat <<EOF
};

int const cmd_ascii_len = sizeof(cmd_ascii) / sizeof(*cmd_ascii);
int const cmd_modbus_len = sizeof(cmd_modbus) / sizeof(*cmd_modbus);
EOF

rm "$protos" "$ascii" "$modbus"
